quarkus.http.port=8082
%dev.quarkus.http.port=9999
quarkus.application.name=service-b
quarkus.swagger-ui.always-include=true

# REST Client
quarkus.rest-client.service-a.scope=jakarta.inject.Singleton
quarkus.rest-client.service-a.url=http://service-a
%dev.quarkus.rest-client.service-a.url=http://localhost:8081
%test.quarkus.rest-client.service-a.url=http://localhost:8081

# OpenTelemetry
quarkus.otel.exporter.otlp.endpoint=http://localhost:4317
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
# Alternative to the console log
quarkus.http.access-log.pattern="...traceId=%{X,traceId} spanId=%{X,spanId}"
quarkus.otel.propagators: tracecontext,baggage

# RabbitMQ configuration
quarkus.amqp.devservices.enabled=false
mp.messaging.outgoing.queue.connector=smallrye-amqp
mp.messaging.outgoing.queue.host=localhost
mp.messaging.outgoing.queue.port=5672
mp.messaging.outgoing.queue.username=guest
mp.messaging.outgoing.queue.password=guest


# Enable Micrometer metrics
quarkus.micrometer.enabled=true
# Enable Prometheus metrics registry
quarkus.micrometer.export.prometheus.enabled=true
# Expose metrics at /q/metrics (Prometheus default path)
quarkus.micrometer.export.prometheus.path=/q/metrics
# Enable JVM and system metrics (optional)
quarkus.micrometer.binder.jvm.enabled=true
quarkus.micrometer.binder.system.enabled=true
# Optionally, include more metric types
quarkus.micrometer.binder.base.enabled=true
